using Domain.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Patchnotes.AI.REST.Models;

namespace Patchnotes.AI.REST.Controllers
{
  [Route("api/[controller]/[action]")]
  [ApiController]
  public class PatchnotesController : ControllerBase
  {
    private readonly ILogger<PatchnotesController> _logger;
    GitHubService _githubService;
    OpenAIService _openAIService;
    public PatchnotesController(ILogger<PatchnotesController> logger, GitHubService githubService, OpenAIService openAIService)
    {
      _logger = logger;
      _githubService = githubService;
      _openAIService = openAIService;
    }

    /// <summary>
    /// Generate Patch Notes
    /// </summary>
    /// <param name="generatePatchNotesRequest">request body</param>
    /// <returns>Patch notes generated by AI from your github release or history</returns>
    [Produces(typeof(PatchNotesResultResponse))]
    [Authorize]
    [HttpPost]
    public async Task<IActionResult> GeneratePatchNotes([FromBody] GeneratePatchNotesRequest generatePatchNotesRequest)
    {
      if (string.IsNullOrEmpty(generatePatchNotesRequest.Repo) || string.IsNullOrEmpty(generatePatchNotesRequest.Owner)) return BadRequest("Invalid body ,missing Repo or Owner");

      var patchData = await _githubService.GeneratePatchData(generatePatchNotesRequest.Owner, generatePatchNotesRequest.Repo);
      var patchNotes = await _openAIService.GeneratePatchNotesAsync(patchData);
      return Ok(new PatchNotesResultResponse { PatchNotes = patchNotes });
    }
  }
}
